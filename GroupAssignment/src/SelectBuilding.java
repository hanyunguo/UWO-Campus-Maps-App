
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.net.*;
import javax.swing.JOptionPane;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import java.awt.*;
import java.text.*;
import javax.accessibility.*;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author tayseanwilson-nolan
 */
public class SelectBuilding extends javax.swing.JFrame {

    User user;
    Admin admin;
    boolean editingMode;
    
    /**
     * Creates new form LandingPage
     */
    public SelectBuilding(User user) {
        this.user = user;
        this.admin = null;
        
        initComponents();
        displayUsername.setText(this.user.viewUserName());
        displayUserType.setText("Standard User");
        getWeather();
        readFromBuildingsList("SystemDatabase/Buildings/List/buildings.json");
        showEditingToolsConditionally();
        initialHide();
        editingMode = false;
    }
    
    public SelectBuilding(Admin admin) {
        this.admin = admin;
        this.user = null;
        initComponents();
        
        displayUsername.setText(this.admin.viewadminName());
        displayUserType.setText("Admin (Developer)");
        getWeather();
        readFromBuildingsList("SystemDatabase/Buildings/List/buildings.json");
        showEditingToolsConditionally();
        initialHide();
        editingMode = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AddorRemoveBuilding = new javax.swing.ButtonGroup();
        selectBuildingPane = new javax.swing.JLayeredPane();
        listScrollPane = new javax.swing.JScrollPane();
        selectBuildingsList = new javax.swing.JList<>();
        buttonPane = new javax.swing.JLayeredPane();
        getBuildingInfo = new javax.swing.JButton();
        selectBuilding = new javax.swing.JButton();
        displayBuildingInformation = new javax.swing.JLayeredPane();
        name = new javax.swing.JLabel();
        displayName = new javax.swing.JTextField();
        code = new javax.swing.JLabel();
        displayCode = new javax.swing.JTextField();
        description = new javax.swing.JLabel();
        descriptionPane = new javax.swing.JScrollPane();
        displayDescription = new javax.swing.JTextArea();
        maps = new javax.swing.JLabel();
        mapsListPane = new javax.swing.JScrollPane();
        displayMapsList = new javax.swing.JTextArea();
        editingFloorsList = new javax.swing.JComboBox<>();
        editingFloorsRemove = new javax.swing.JButton();
        editingFloorsAdd = new javax.swing.JButton();
        editingButtonARB = new javax.swing.JButton();
        editingSelectAddBuilding = new javax.swing.JRadioButton();
        editingSelectRemoveBuilding = new javax.swing.JRadioButton();
        labelEditingBuildings = new javax.swing.JLabel();
        labelLocationWeather = new javax.swing.JLabel();
        labelTemp = new javax.swing.JLabel();
        labelFeelsLike = new javax.swing.JLabel();
        weatherIcon = new javax.swing.JLabel();
        labelLastUpdated = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        selectEditingToolsBuildings = new javax.swing.JButton();
        selectHelp = new javax.swing.JButton();
        selectLogout = new javax.swing.JButton();
        userPane = new javax.swing.JLayeredPane();
        userIcon = new javax.swing.JLabel();
        displayUsername = new javax.swing.JLabel();
        displayUserType = new javax.swing.JLabel();
        Logo = new javax.swing.JLabel();
        backgroundVideo = new javax.swing.JLabel();
        backgroundImage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        selectBuildingPane.setLayout(new java.awt.BorderLayout());

        listScrollPane.setBackground(new java.awt.Color(51, 51, 51));

        selectBuildingsList.setBackground(new java.awt.Color(51, 51, 51));
        selectBuildingsList.setBorder(null);
        selectBuildingsList.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        selectBuildingsList.setForeground(new java.awt.Color(255, 255, 255));
        selectBuildingsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listScrollPane.setViewportView(selectBuildingsList);

        selectBuildingPane.add(listScrollPane, java.awt.BorderLayout.CENTER);

        getContentPane().add(selectBuildingPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 250, 290, 290));

        buttonPane.setLayout(new java.awt.BorderLayout());

        getBuildingInfo.setBackground(new java.awt.Color(51, 51, 51));
        getBuildingInfo.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        getBuildingInfo.setForeground(new java.awt.Color(255, 255, 255));
        getBuildingInfo.setText("Get Info");
        getBuildingInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getBuildingInfoActionPerformed(evt);
            }
        });
        buttonPane.add(getBuildingInfo, java.awt.BorderLayout.LINE_START);

        selectBuilding.setBackground(new java.awt.Color(76, 51, 76));
        selectBuilding.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        selectBuilding.setForeground(new java.awt.Color(255, 255, 255));
        selectBuilding.setText("Enter Building");
        selectBuilding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectBuildingActionPerformed(evt);
            }
        });
        buttonPane.add(selectBuilding, java.awt.BorderLayout.CENTER);

        getContentPane().add(buttonPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 540, 290, 30));

        name.setBackground(new java.awt.Color(153, 153, 153));
        name.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        name.setForeground(new java.awt.Color(204, 204, 204));
        name.setText("Building Full Name");

        displayName.setEditable(false);
        displayName.setBackground(new java.awt.Color(51, 51, 51));
        displayName.setFont(new java.awt.Font("Helvetica Neue", 0, 12)); // NOI18N
        displayName.setForeground(new java.awt.Color(153, 153, 153));

        code.setBackground(new java.awt.Color(153, 153, 153));
        code.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        code.setForeground(new java.awt.Color(204, 204, 204));
        code.setText("Building Code");

        displayCode.setEditable(false);
        displayCode.setBackground(new java.awt.Color(51, 51, 51));
        displayCode.setFont(new java.awt.Font("Helvetica Neue", 0, 12)); // NOI18N
        displayCode.setForeground(new java.awt.Color(153, 153, 153));

        description.setBackground(new java.awt.Color(153, 153, 153));
        description.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        description.setForeground(new java.awt.Color(204, 204, 204));
        description.setText("Description");

        displayDescription.setEditable(false);
        displayDescription.setBackground(new java.awt.Color(51, 51, 51));
        displayDescription.setColumns(20);
        displayDescription.setFont(new java.awt.Font("Helvetica Neue", 0, 12)); // NOI18N
        displayDescription.setForeground(new java.awt.Color(153, 153, 153));
        displayDescription.setRows(5);
        descriptionPane.setViewportView(displayDescription);

        maps.setBackground(new java.awt.Color(153, 153, 153));
        maps.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        maps.setForeground(new java.awt.Color(204, 204, 204));
        maps.setText("Floors");

        displayMapsList.setEditable(false);
        displayMapsList.setBackground(new java.awt.Color(51, 51, 51));
        displayMapsList.setColumns(20);
        displayMapsList.setFont(new java.awt.Font("Helvetica Neue", 0, 12)); // NOI18N
        displayMapsList.setForeground(new java.awt.Color(153, 153, 153));
        displayMapsList.setRows(5);
        mapsListPane.setViewportView(displayMapsList);

        displayBuildingInformation.setLayer(name, javax.swing.JLayeredPane.DEFAULT_LAYER);
        displayBuildingInformation.setLayer(displayName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        displayBuildingInformation.setLayer(code, javax.swing.JLayeredPane.DEFAULT_LAYER);
        displayBuildingInformation.setLayer(displayCode, javax.swing.JLayeredPane.DEFAULT_LAYER);
        displayBuildingInformation.setLayer(description, javax.swing.JLayeredPane.DEFAULT_LAYER);
        displayBuildingInformation.setLayer(descriptionPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        displayBuildingInformation.setLayer(maps, javax.swing.JLayeredPane.DEFAULT_LAYER);
        displayBuildingInformation.setLayer(mapsListPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout displayBuildingInformationLayout = new javax.swing.GroupLayout(displayBuildingInformation);
        displayBuildingInformation.setLayout(displayBuildingInformationLayout);
        displayBuildingInformationLayout.setHorizontalGroup(
            displayBuildingInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayBuildingInformationLayout.createSequentialGroup()
                .addGroup(displayBuildingInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(name)
                    .addComponent(maps)
                    .addComponent(displayName)
                    .addComponent(mapsListPane, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(displayBuildingInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(code)
                    .addComponent(description)
                    .addComponent(descriptionPane, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(displayCode))
                .addGap(22, 22, 22))
        );
        displayBuildingInformationLayout.setVerticalGroup(
            displayBuildingInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayBuildingInformationLayout.createSequentialGroup()
                .addGroup(displayBuildingInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name)
                    .addComponent(code))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(displayBuildingInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(displayCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(displayName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(displayBuildingInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(description)
                    .addComponent(maps))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(displayBuildingInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mapsListPane, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                    .addComponent(descriptionPane)))
        );

        getContentPane().add(displayBuildingInformation, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 250, 460, 320));

        editingFloorsList.setBackground(new java.awt.Color(51, 51, 51));
        editingFloorsList.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(editingFloorsList, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 580, 200, -1));

        editingFloorsRemove.setBackground(new java.awt.Color(102, 0, 0));
        editingFloorsRemove.setForeground(new java.awt.Color(255, 255, 255));
        editingFloorsRemove.setText("Remove");
        editingFloorsRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editingFloorsRemoveActionPerformed(evt);
            }
        });
        getContentPane().add(editingFloorsRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 600, 100, -1));

        editingFloorsAdd.setBackground(new java.awt.Color(0, 51, 0));
        editingFloorsAdd.setForeground(new java.awt.Color(255, 255, 255));
        editingFloorsAdd.setText("Add");
        editingFloorsAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editingFloorsAddActionPerformed(evt);
            }
        });
        getContentPane().add(editingFloorsAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 600, 100, -1));

        editingButtonARB.setBackground(new java.awt.Color(51, 51, 51));
        editingButtonARB.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        editingButtonARB.setForeground(new java.awt.Color(255, 255, 255));
        editingButtonARB.setText("Select");
        editingButtonARB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editingButtonARBActionPerformed(evt);
            }
        });
        getContentPane().add(editingButtonARB, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 594, 120, 30));

        AddorRemoveBuilding.add(editingSelectAddBuilding);
        editingSelectAddBuilding.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        editingSelectAddBuilding.setForeground(new java.awt.Color(255, 255, 255));
        editingSelectAddBuilding.setText("Add");
        getContentPane().add(editingSelectAddBuilding, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 600, -1, -1));

        AddorRemoveBuilding.add(editingSelectRemoveBuilding);
        editingSelectRemoveBuilding.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        editingSelectRemoveBuilding.setForeground(new java.awt.Color(255, 255, 255));
        editingSelectRemoveBuilding.setText("Remove");
        getContentPane().add(editingSelectRemoveBuilding, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 600, -1, -1));

        labelEditingBuildings.setBackground(new java.awt.Color(153, 153, 153));
        labelEditingBuildings.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        labelEditingBuildings.setForeground(new java.awt.Color(204, 204, 204));
        labelEditingBuildings.setText("Select A Building From The Directory");
        getContentPane().add(labelEditingBuildings, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 220, -1, 20));

        labelLocationWeather.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        labelLocationWeather.setForeground(new java.awt.Color(255, 255, 255));
        labelLocationWeather.setText("CITY, PROVINCE");
        getContentPane().add(labelLocationWeather, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 50, -1, -1));

        labelTemp.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        labelTemp.setForeground(new java.awt.Color(255, 255, 255));
        labelTemp.setText("Temp");
        getContentPane().add(labelTemp, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 60, -1, -1));

        labelFeelsLike.setFont(new java.awt.Font("Helvetica Neue", 1, 12)); // NOI18N
        labelFeelsLike.setForeground(new java.awt.Color(255, 255, 255));
        labelFeelsLike.setText("Feels Like: Temp");
        getContentPane().add(labelFeelsLike, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 90, -1, -1));

        weatherIcon.setIcon(new javax.swing.ImageIcon("/Users/tayseanwilson-nolan/NetBeansProjects/GroupAssignment/Images/Icons/clouds_tiny.png")); // NOI18N
        getContentPane().add(weatherIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 60, -1, -1));

        labelLastUpdated.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        labelLastUpdated.setForeground(new java.awt.Color(255, 255, 255));
        labelLastUpdated.setText("LAST UPDATED: DDMMYYYY HHMMSS");
        getContentPane().add(labelLastUpdated, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 120, -1, -1));

        title.setFont(new java.awt.Font("Helvetica Neue", 3, 36)); // NOI18N
        title.setForeground(new java.awt.Color(255, 255, 255));
        title.setText("Select Building");
        getContentPane().add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 150, -1, -1));

        selectEditingToolsBuildings.setBackground(new java.awt.Color(51, 51, 51));
        selectEditingToolsBuildings.setForeground(new java.awt.Color(255, 255, 255));
        selectEditingToolsBuildings.setText("Editing Tools");
        selectEditingToolsBuildings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectEditingToolsBuildingsActionPerformed(evt);
            }
        });
        getContentPane().add(selectEditingToolsBuildings, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 40, -1, -1));

        selectHelp.setBackground(new java.awt.Color(51, 51, 51));
        selectHelp.setForeground(new java.awt.Color(255, 255, 255));
        selectHelp.setText("Help");
        selectHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectHelpActionPerformed(evt);
            }
        });
        getContentPane().add(selectHelp, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 40, -1, -1));

        selectLogout.setBackground(new java.awt.Color(51, 51, 51));
        selectLogout.setForeground(new java.awt.Color(255, 255, 255));
        selectLogout.setText("Log out");
        selectLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectLogoutActionPerformed(evt);
            }
        });
        getContentPane().add(selectLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 40, -1, -1));

        userIcon.setIcon(new javax.swing.ImageIcon("/Users/tayseanwilson-nolan/NetBeansProjects/GroupAssignment/Images/Icons/USER-ICON.png")); // NOI18N
        userPane.add(userIcon);
        userIcon.setBounds(0, 10, 32, 32);

        displayUsername.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        displayUsername.setForeground(new java.awt.Color(255, 255, 255));
        displayUsername.setText("Username");
        userPane.add(displayUsername);
        displayUsername.setBounds(50, 10, 200, 20);

        displayUserType.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        displayUserType.setForeground(new java.awt.Color(255, 255, 255));
        displayUserType.setText("Account Type");
        userPane.add(displayUserType);
        displayUserType.setBounds(50, 30, 180, 13);

        getContentPane().add(userPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 260, 60));

        Logo.setIcon(new javax.swing.ImageIcon("/Users/tayseanwilson-nolan/NetBeansProjects/GroupAssignment/Images/Icons/UWO_LOGO_TINY.png")); // NOI18N
        getContentPane().add(Logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, -20, 160, 150));

        backgroundVideo.setIcon(new javax.swing.ImageIcon("/Users/tayseanwilson-nolan/NetBeansProjects/GroupAssignment/Images/Icons/UWO_DRONE.gif")); // NOI18N
        getContentPane().add(backgroundVideo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        backgroundImage.setIcon(new javax.swing.ImageIcon("/Users/tayseanwilson-nolan/NetBeansProjects/GroupAssignment/Images/Icons/UWO.jpg")); // NOI18N
        getContentPane().add(backgroundImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getWeather (){
        saveWeatherApi();
        JSONParser jP = new JSONParser();
        try (FileReader reader = new FileReader ("SystemDatabase/Weather/weather.json")) {
            JSONObject jsonObject = (JSONObject) (jP.parse(reader));
            JSONArray jsonArray = (JSONArray) jsonObject.get("weather");
            JSONObject key = (JSONObject) jsonArray.get(0);
            System.out.println(key.toString());
            JSONObject mainKey = (JSONObject) key.get("main");
            JSONObject sysKey = (JSONObject) key.get("sys");
            
            try {
                String location = key.get("name").toString() + ", " + sysKey.get("country").toString();
                //String lastUpdated = currentKey.get("last_updated").toString();
                double tempCtoK = Double.parseDouble(mainKey.get("temp").toString()) - 273.15;
                double feelsLikeCtoK = Double.parseDouble( mainKey.get("feels_like").toString()) -273.15;
                String tempC = (int)tempCtoK + "°C";
                String feelsLikeC = (int)feelsLikeCtoK + "°C";
                
                labelTemp.setText(tempC);
                labelFeelsLike.setText("Feels Like: "+feelsLikeC);
                labelLocationWeather.setText(location);
                //labelLastUpdated.setText("Last Updated: "+lastUpdated);
                // SHOW DISPLAYS
                weatherIcon.show();
                labelTemp.show();
                labelFeelsLike.show();
                labelLocationWeather.show();
                //labelLastUpdated.show();
                System.out.println("Location: " + location + "\nTemperature: "+tempC +"\nFeels Like: "+ feelsLikeC);
            } 
            catch (Exception e){
                e.printStackTrace();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void saveWeatherApi () {
        
        // HIDE THESE INITIAL displays
        weatherIcon.hide();
        labelTemp.hide();
        labelFeelsLike.hide();
        labelLocationWeather.hide();
        labelLastUpdated.hide();
        String urlString = "https://api.openweathermap.org/data/2.5/weather?lat=42.9832406&lon=-81.243372&appid=7927fc851de0c8830d63657bb365f75e";
        try {
            // SAVE WEATHER INFORMATION
            StringBuilder result = new StringBuilder();
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            try {
                BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));

                String line;
                JSONArray jArray = new JSONArray(); 
                JSONObject jObj = new JSONObject();
                while ((line = rd.readLine()) != null){
                    result.append(line);
                    jArray.add(result);
                    //System.out.println("Writing: " + line);
                }
                rd.close();
                jObj.put("weather", jArray);
                FileWriter writer = new FileWriter("SystemDatabase/Weather/weather.json");
                writer.write(jObj.toString());
                writer.close();
                System.out.println(jObj.toString());
            }
            catch (UnknownHostException e) {
                JOptionPane.showMessageDialog(this, "Internet connection is needed to display the current weather!\nThe last retrieved weather update will be displayed.");
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void selectBuildingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectBuildingActionPerformed
        // TODO add your handling code here:
        if (editingMode == false) { // STANDARD MODE 
            String buildingName = selectBuildingsList.getSelectedValue();
            String buildingCode = convertNameToCode(buildingName, "SystemDatabase/Buildings/List/buildings.json");
            if (buildingCode.equals("")){
                JOptionPane.showMessageDialog(this, "No access\nSuggestions:\n(1)Try selecting a building again\n(2)Try restarting your program");
            } else {
                this.dispose();
                if (this.user != null) {

                    Maps alumniHall = new Maps(this.user, buildingCode, 1);
                    alumniHall.setVisible(true);

                }
                else {
                    Maps alumniHall = new Maps(this.admin,buildingCode ,1);
                    alumniHall.setVisible(true); 
                }
            }
        }
        else { // EDITING MODE
            if (selectBuildingsList.isSelectionEmpty()){
                JOptionPane.showMessageDialog(this, "Select a map to edit.");
            } else {
                String buildingNameEditor = selectBuildingsList.getSelectedValue().toString();
                String[] nameParts = buildingNameEditor.split("-");
                String buildingCode = convertNameToCode(nameParts[0], "SystemDatabase/Buildings/List/buildings.json");
                modifyBuilding(buildingCode);
            }
        }
    }//GEN-LAST:event_selectBuildingActionPerformed

    private void selectLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectLogoutActionPerformed
        // TODO add your handling code here:
        this.dispose();
        LandingPage goBack = new LandingPage();
        goBack.setVisible(true);
    }//GEN-LAST:event_selectLogoutActionPerformed

    private void selectEditingToolsBuildingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectEditingToolsBuildingsActionPerformed
        // TODO add your handling code here:
        if (!(selectEditingToolsBuildings.getText().equals("Editing Tools")) || this.editingMode == true) {
            refreshPage();
        }
        editingModeDisplay();
        this.editingMode = true;
        title.setText("Editing Mode");
        selectEditingToolsBuildings.setText("Standard Mode");
        readFromBuildingsListEditingMode("SystemDatabase/Buildings/List/buildings.json");
            
        
    }//GEN-LAST:event_selectEditingToolsBuildingsActionPerformed

    private void selectHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectHelpActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Admin:\n(1)Use Editing Tools to Add, Edit, and Remove Buildings\n(2)Add and remove floors\n(3)Access buildings\nUsers:\n(1)Access buildings and get information");
    }//GEN-LAST:event_selectHelpActionPerformed

    private void getBuildingInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getBuildingInfoActionPerformed
        // TODO add your handling code here:
        if (this.editingMode == false){
            String buildingName = selectBuildingsList.getSelectedValue().toString();
            String buildingCode = convertNameToCode(buildingName, "SystemDatabase/Buildings/List/buildings.json");
            readBuildingInformation(buildingCode,"SystemDatabase/Buildings/");
        }
        else {
            editingModeDisplay2();
            String buildingNameEditor = selectBuildingsList.getSelectedValue().toString();
            String[] nameParts = buildingNameEditor.split("-");
            String buildingCode = convertNameToCode(nameParts[0], "SystemDatabase/Buildings/List/buildings.json");
            
            // CLEAR FIELDS
            displayName.setText("");
            displayCode.setText("");
            displayDescription.setText("");
            displayMapsList.setText("");
            
            // REFRESH LIST
            editingFloorsList.removeAllItems();
            
            // POPULATE LIST
            readBuildingFloorsEditingMode(buildingCode, "SystemDatabase/Buildings/");
        }
        
    }//GEN-LAST:event_getBuildingInfoActionPerformed

    private void editingButtonARBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editingButtonARBActionPerformed
        // TODO add your handling code here:
        if (editingSelectRemoveBuilding.isSelected()){
            if (!selectBuildingsList.isSelectionEmpty()) {
                String buildingNameEditor = selectBuildingsList.getSelectedValue().toString();
                String[] nameParts = buildingNameEditor.split("-");
                boolean succees = removeFromBuildingsList(nameParts[0], "SystemDatabase/Buildings/List/buildings.json");
                if (!succees) {
                    JOptionPane.showMessageDialog(this, "Error: unable to delete this building");
                }
                refreshPage();
            }
        }
        else if (editingSelectAddBuilding.isSelected()){
            if (!selectBuildingsList.isSelectionEmpty()) {
                String buildingNameEditor = selectBuildingsList.getSelectedValue().toString();
                String[] nameParts = buildingNameEditor.split("-");
                boolean succees = addToBuildingsList(nameParts[0], "SystemDatabase/Buildings/List/buildings.json");
                if (!succees) {
                    JOptionPane.showMessageDialog(this, "Error: unable to add this building");
                }
                refreshPage();
            }
        }
        else {
            // do nothing
        }
    }//GEN-LAST:event_editingButtonARBActionPerformed

    private void editingFloorsRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editingFloorsRemoveActionPerformed
        // TODO add your handling code here:
        
        if (!selectBuildingsList.isSelectionEmpty()) {
            System.out.println("Attempting to remove floor");
            String buildingNameEditor = selectBuildingsList.getSelectedValue().toString();
            String[] nameParts = buildingNameEditor.split("-");
            String mapCode = convertNameToCode(nameParts[0], "SystemDatabase/Buildings/List/buildings.json");
            String floorNameEditor = editingFloorsList.getSelectedItem().toString();
            String[] floorNameParts = floorNameEditor.split("-");
            boolean success = removeFromFloorsList(floorNameParts[0], "SystemDatabase/Buildings/" + mapCode + ".json");
            if (!success) {
                JOptionPane.showMessageDialog(this, "Error: unable to delete this floor");
            }
            refreshPage();
        }

    }//GEN-LAST:event_editingFloorsRemoveActionPerformed

    private void editingFloorsAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editingFloorsAddActionPerformed
        // TODO add your handling code here:
        if (!selectBuildingsList.isSelectionEmpty()) {
            System.out.println("Attempting to remove floor");
            String buildingNameEditor = selectBuildingsList.getSelectedValue().toString();
            String[] nameParts = buildingNameEditor.split("-");
            String mapCode = convertNameToCode(nameParts[0], "SystemDatabase/Buildings/List/buildings.json");
            String floorNameEditor = editingFloorsList.getSelectedItem().toString();
            String[] floorNameParts = floorNameEditor.split("-");
            boolean success = addToFloorsList(floorNameParts[0], "SystemDatabase/Buildings/" + mapCode + ".json");
            if (!success) {
                JOptionPane.showMessageDialog(this, "Error: unable to add this floor");
            }
            refreshPage();
        }
    }//GEN-LAST:event_editingFloorsAddActionPerformed

    private void readBuildingInformation(String buildingCode, String filePath) {
        JSONParser jP = new JSONParser();
        
        try (FileReader reader = new FileReader(filePath +"/"+buildingCode+".json")) {
            Object obj = jP.parse(reader);
            JSONObject jsonObject = (JSONObject) obj;
            JSONArray list = (JSONArray) jsonObject.get("maps");
            int size = list.size();
            Object[] arrayList = list.toArray();
            String[] visibleMapsList = new String[arrayList.length];
            String displayMaps = "";
            int count = 0;
            for (int i=0; i<size;i++){
                JSONObject jObject = (JSONObject) arrayList[i];
                System.out.println("Found: " + jObject.get("name"));
                if (!(jObject.get("visible").equals("0"))) {
                    // IF VISIBLE
                    visibleMapsList[count] = jObject.get("name").toString();
                    displayMaps += jObject.get("name").toString() + "\n";
                    count++;
                }
            }
             
            displayName.setText(jsonObject.get("name").toString());
            displayDescription.setText(jsonObject.get("description").toString());
            displayMapsList.setText(displayMaps);
            displayCode.setText(jsonObject.get("code").toString());
        }
        catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void readBuildingFloorsEditingMode(String buildingCode, String filePath) {
        JSONParser jP = new JSONParser();
        
        try (FileReader reader = new FileReader(filePath +"/"+buildingCode+".json")) {
            Object obj = jP.parse(reader);
            JSONObject jsonObject = (JSONObject) obj;
            JSONArray list = (JSONArray) jsonObject.get("maps");
            int size = list.size();
            Object[] arrayList = list.toArray();
            for (int i=0; i<size;i++){
                JSONObject jObject = (JSONObject) arrayList[i];
                System.out.println("Retrieved: " + jObject.get("name"));
                if (!(jObject.get("visible").equals("0"))) {
                    // IF VISIBLE
                    String floorName = jObject.get("name").toString();
                    editingFloorsList.addItem(floorName+"-ADDED");
                }
                else {
                    // IF NOT VISIBLE
                    String floorName = jObject.get("name").toString();
                    editingFloorsList.addItem(floorName+"-REMOVED");
                }
            }
        }
        catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }

    private boolean addToBuildingsList(String buildingName, String filePath) {
        JSONParser jP = new JSONParser();
        boolean matched = false;
        try ( FileReader reader = new FileReader(filePath)) {
            Object obj = jP.parse(reader);
            JSONObject jsonObject = (JSONObject) obj;
            JSONArray list = (JSONArray) jsonObject.get("buildings");
            int size = list.size();
            Object[] originalList = list.toArray();
            JSONArray customList = new JSONArray();
            for (int i = 0; i < size; i++) {
                JSONObject jObject = (JSONObject) originalList[i];
                JSONObject building = new JSONObject();
                System.out.println("Retrieved: " + jObject.get("name"));
                if ((jObject.get("name").equals(buildingName))) {
                    
                    // MATCH
                    matched = true;
                    // IF NOT VISIBLE ALREADY CHECK
                    if (!(jObject.get("visible").equals("0"))) {
                        JOptionPane.showMessageDialog(this, "This has already been added");
                        refreshPage();
                    }
                    System.out.println("Turning off visibility for the following building: " + jObject.get("name"));
                    // TURN OFF

                    building.put("name", jObject.get("name"));
                    building.put("code", jObject.get("code"));
                    building.put("visible", "1");
                    customList.add(building);
                } else {
                    // KEEP AS IS

                    building.put("name", jObject.get("name"));
                    building.put("code", jObject.get("code"));
                    building.put("visible", jObject.get("visible"));
                    customList.add(building);
                }
            }
            JSONObject updatedList = new JSONObject();
            updatedList.put("buildings", customList);

            FileWriter writer = new FileWriter(filePath);
            writer.write(updatedList.toString());
            writer.close();

            if (matched) {
                return true;
            }
            
        }
        catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        
        return false;
    }
    
    private boolean removeFromBuildingsList(String buildingName, String filePath) {
        JSONParser jP = new JSONParser();
        boolean matched = false;
        try ( FileReader reader = new FileReader(filePath)) {
            Object obj = jP.parse(reader);
            JSONObject jsonObject = (JSONObject) obj;
            JSONArray list = (JSONArray) jsonObject.get("buildings");
            int size = list.size();
            Object[] originalList = list.toArray();
            JSONArray customList = new JSONArray();
            for (int i = 0; i < size; i++) {
                JSONObject jObject = (JSONObject) originalList[i];
                JSONObject building = new JSONObject();
                System.out.println("Retrieved: " + jObject.get("name"));
                if ((jObject.get("name").equals(buildingName))) {
                    
                    // MATCH
                    matched = true;
                    // IF NOT VISIBLE ALREADY CHECK
                    if ((jObject.get("visible").equals("0"))) {
                        JOptionPane.showMessageDialog(this, "This has already been removed");
                        refreshPage();
                    }
                    System.out.println("Turning off visibility for the following building: " + jObject.get("name"));
                    // TURN OFF

                    building.put("name", jObject.get("name"));
                    building.put("code", jObject.get("code"));
                    building.put("visible", "0");
                    customList.add(building);
                } else {
                    // KEEP AS IS

                    building.put("name", jObject.get("name"));
                    building.put("code", jObject.get("code"));
                    building.put("visible", jObject.get("visible"));
                    customList.add(building);
                }
            }
            JSONObject updatedList = new JSONObject();
            updatedList.put("buildings", customList);

            FileWriter writer = new FileWriter(filePath);
            writer.write(updatedList.toString());
            writer.close();

            if (matched) {
                return true;
            }
            
        }
        catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        
        return false;
    }
    
    private boolean removeFromFloorsList(String floorName, String filePath) {
        JSONParser jP = new JSONParser();
        boolean matched = false;
        try ( FileReader reader = new FileReader(filePath)) {
            Object obj = jP.parse(reader);
            JSONObject jsonObject = (JSONObject) obj;
            JSONArray list = (JSONArray) jsonObject.get("maps");
            int size = list.size();
            Object[] originalList = list.toArray();
            JSONArray customList = new JSONArray();
            for (int i = 0; i < size; i++) {
                JSONObject jObject = (JSONObject) originalList[i];
                JSONObject building = new JSONObject();
                System.out.println("Retrieved: " + jObject.get("name"));
                if ((jObject.get("name").equals(floorName))) {
                    
                    // MATCH
                    matched = true;
                    // IF NOT VISIBLE ALREADY CHECK
                    if ((jObject.get("visible").equals("0"))) {
                        JOptionPane.showMessageDialog(this, "This has already been removed");
                        refreshPage();
                    }
                    System.out.println("Turning off visibility for the following floor: " + jObject.get("name"));
                    // TURN OFF

                    building.put("name", jObject.get("name"));
                    building.put("layers", jObject.get("layers"));
                    building.put("visible", "0");
                    customList.add(building);
                } else {
                    // KEEP AS IS

                    building.put("name", jObject.get("name"));
                    building.put("layers", jObject.get("layers"));
                    building.put("visible", jObject.get("visible"));
                    customList.add(building);
                }
            }
            JSONObject updatedList = new JSONObject();
            updatedList.put("maps", customList);
            updatedList.put("name", jsonObject.get("name"));
            updatedList.put("description", jsonObject.get("description"));
            updatedList.put("code", jsonObject.get("code"));

            FileWriter writer = new FileWriter(filePath);
            writer.write(updatedList.toString());
            writer.close();

            if (matched) {
                return true;
            }
            
        }
        catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        
        return false;
    }
    
    private boolean addToFloorsList(String floorName, String filePath) {
        JSONParser jP = new JSONParser();
        boolean matched = false;
        try ( FileReader reader = new FileReader(filePath)) {
            Object obj = jP.parse(reader);
            JSONObject jsonObject = (JSONObject) obj;
            JSONArray list = (JSONArray) jsonObject.get("maps");
            int size = list.size();
            Object[] originalList = list.toArray();
            JSONArray customList = new JSONArray();
            for (int i = 0; i < size; i++) {
                JSONObject jObject = (JSONObject) originalList[i];
                JSONObject building = new JSONObject();
                System.out.println("Retrieved: " + jObject.get("name"));
                if ((jObject.get("name").equals(floorName))) {
                    
                    // MATCH
                    matched = true;
                    // IF VISIBLE ALREADY CHECK
                    if ((jObject.get("visible").equals("1"))) {
                        JOptionPane.showMessageDialog(this, "This has already been added");
                        refreshPage();
                    }
                    System.out.println("Turning on visibility for the following floor: " + jObject.get("name"));
                    // TURN OFF

                    building.put("name", jObject.get("name"));
                    building.put("layers", jObject.get("layers"));
                    building.put("visible", "1");
                    customList.add(building);
                } else {
                    // KEEP AS IS

                    building.put("name", jObject.get("name"));
                    building.put("layers", jObject.get("layers"));
                    building.put("visible", jObject.get("visible"));
                    customList.add(building);
                }
            }
            JSONObject updatedList = new JSONObject();
            updatedList.put("maps", customList);
            updatedList.put("name", jsonObject.get("name"));
            updatedList.put("description", jsonObject.get("description"));
            updatedList.put("code", jsonObject.get("code"));

            FileWriter writer = new FileWriter(filePath);
            writer.write(updatedList.toString());
            writer.close();

            if (matched) {
                return true;
            }
            
        }
        catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        
        return false;
    }
    
    private void modifyBuilding(String buildingCode) {
        System.out.print("Searching for building: " + buildingCode + "\n");
        String filePath = "SystemDatabase/Buildings/"+buildingCode+".json";     
        JSONObject buildingJson = new JSONObject();
        JSONObject modifiedBuilding = new JSONObject();
        JSONParser jP = new JSONParser();
        // FIND ORIGINALBUILDING INFO
        try (FileReader reader = new FileReader(filePath)) {
            Object obj = jP.parse(reader);
            buildingJson = (JSONObject) obj;
        } catch (FileNotFoundException e) { e.printStackTrace(); }
        catch (Exception e) { e.printStackTrace(); }
        
        // MODIFY POI VALUES
        if (!displayDescription.getText().equals("")) {
            // DESCRIPTION
            modifiedBuilding.put("description", displayDescription.getText());
        } else {
            modifiedBuilding.put("description", buildingJson.get("description"));
        }
        if (!displayName.getText().equals("")) {
            // DESCRIPTION
            modifiedBuilding.put("name", displayName.getText());
        } else {
            modifiedBuilding.put("name", buildingJson.get("name"));
        }
        
        modifiedBuilding.put("maps", buildingJson.get("maps"));
        modifiedBuilding.put("code", buildingJson.get("code"));

        // WRITE FILE TO JSON
        try ( FileWriter fileWriter = new FileWriter(filePath)) {
            System.out.println("New modified building: " + modifiedBuilding.toString());
            fileWriter.write(modifiedBuilding.toString());
            fileWriter.close();;
        } catch (Exception e) {
            System.out.println("Could not write to file");
        }
        refreshPage();
    }
    
    private void readFromBuildingsList(String filePath) {
        JSONParser jP = new JSONParser();
        
        try (FileReader reader = new FileReader(filePath)) {
            Object obj = jP.parse(reader);
            JSONObject jsonObject = (JSONObject) obj;
            JSONArray list = (JSONArray) jsonObject.get("buildings");
            int size = list.size();
            Object[] arrayList = list.toArray();
            String[] tempList = new String[arrayList.length];
            int count = 0;
            for (int i=0; i<size;i++){
                JSONObject jObject = (JSONObject) arrayList[i];
                System.out.println("Found: " + jObject.get("name"));
                if (!(jObject.get("visible").equals("0"))) {
                    // IF VISIBLE
                    tempList[count] = jObject.get("name").toString();
                    count++;
                }
            }
            String[] visibleBuildingsList = new String[count];
            for (int j=0; j<count;j++){
                visibleBuildingsList[j] = tempList[j];
            }
            
            selectBuildingsList.setListData(visibleBuildingsList);
        }
        catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void readFromBuildingsListEditingMode(String filePath) {
        JSONParser jP = new JSONParser();
        
        try (FileReader reader = new FileReader(filePath)) {
            Object obj = jP.parse(reader);
            JSONObject jsonObject = (JSONObject) obj;
            JSONArray list = (JSONArray) jsonObject.get("buildings");
            int size = list.size();
            Object[] arrayList = list.toArray();
            String[] editingModeList = new String[arrayList.length];
            for (int i=0; i<size;i++){
                JSONObject jObject = (JSONObject) arrayList[i];
                System.out.println("Found: " + jObject.get("name"));
                if (!(jObject.get("visible").equals("0"))) {
                    // IF VISIBLE
                    editingModeList[i] = jObject.get("name").toString() + "-ADDED";
                }
                else {
                    editingModeList[i] = jObject.get("name").toString() + "-REMOVED";
                }
            }
            
            selectBuildingsList.setListData(editingModeList);
        }
        catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private String convertNameToCode(String buildingName, String filePath) {
        System.out.println("Searching for building "+buildingName+" in file path: "+filePath);
        JSONParser jP = new JSONParser();
        String code = "";
        try (FileReader reader = new FileReader(filePath)) {
            Object obj = jP.parse(reader);
            JSONObject jsonObject = (JSONObject) obj;
            JSONArray list = (JSONArray) jsonObject.get("buildings");
            int size = list.size();
            Object[] arrayList = list.toArray();
            for (int i=0; i<size;i++){
                JSONObject jObject = (JSONObject) arrayList[i];
                System.out.println("Identified: " + jObject.get("name"));
                if (jObject.get("name").toString().equals(buildingName)) {
                    System.out.println("Retrieving code for " + jObject.get("name").toString() + ", code: " + jObject.get("code").toString());
                    code = jObject.get("code").toString();
                    return code;
                }
            }
        }
        catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        return code;
    }
    
    private void showEditingToolsConditionally(){
        if (user != null) {
            selectEditingToolsBuildings.hide();
        }
        if (admin != null) {
            selectEditingToolsBuildings.show();
        }
    }
    
    private void editingModeDisplay() {
        
        labelEditingBuildings.show();
        editingButtonARB.show();
        editingSelectAddBuilding.show();
        editingSelectRemoveBuilding.show();
        
        selectBuilding.setText("Commit Edits");
        getBuildingInfo.setText("Edit Floors");
        displayName.setEditable(true);
        displayName.setBackground(Color.WHITE);
        displayName.setForeground(Color.BLACK);
        displayDescription.setEditable(true);
        
        displayDescription.setBackground(Color.WHITE);
        displayDescription.setForeground(Color.BLACK);
    }
    
    private void editingModeDisplay2() {
        editingFloorsList.show();
        editingFloorsAdd.show();
        editingFloorsRemove.show();
        
        editingButtonARB.hide();
        editingSelectAddBuilding.hide();
        editingSelectRemoveBuilding.hide();
    }
    
    private void initialHide() {
        editingFloorsList.hide();
        editingFloorsAdd.hide();
        editingFloorsRemove.hide();
        editingButtonARB.hide();
        editingSelectAddBuilding.hide();
        editingSelectRemoveBuilding.hide();
        labelEditingBuildings.hide();
    }
    
    public void refreshPage() {
        this.dispose();
        if (this.user != null) {
            SelectBuilding refresh = new SelectBuilding(this.user);
            refresh.setVisible(true);
        }
        else {
            SelectBuilding refresh = new SelectBuilding(this.admin);
            refresh.setVisible(true);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LandingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LandingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LandingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LandingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LandingPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup AddorRemoveBuilding;
    private javax.swing.JLabel Logo;
    private javax.swing.JLabel backgroundImage;
    private javax.swing.JLabel backgroundVideo;
    private javax.swing.JLayeredPane buttonPane;
    private javax.swing.JLabel code;
    private javax.swing.JLabel description;
    private javax.swing.JScrollPane descriptionPane;
    private javax.swing.JLayeredPane displayBuildingInformation;
    private javax.swing.JTextField displayCode;
    private javax.swing.JTextArea displayDescription;
    private javax.swing.JTextArea displayMapsList;
    private javax.swing.JTextField displayName;
    private javax.swing.JLabel displayUserType;
    private javax.swing.JLabel displayUsername;
    private javax.swing.JButton editingButtonARB;
    private javax.swing.JButton editingFloorsAdd;
    private javax.swing.JComboBox<String> editingFloorsList;
    private javax.swing.JButton editingFloorsRemove;
    private javax.swing.JRadioButton editingSelectAddBuilding;
    private javax.swing.JRadioButton editingSelectRemoveBuilding;
    private javax.swing.JButton getBuildingInfo;
    private javax.swing.JLabel labelEditingBuildings;
    private javax.swing.JLabel labelFeelsLike;
    private javax.swing.JLabel labelLastUpdated;
    private javax.swing.JLabel labelLocationWeather;
    private javax.swing.JLabel labelTemp;
    private javax.swing.JScrollPane listScrollPane;
    private javax.swing.JLabel maps;
    private javax.swing.JScrollPane mapsListPane;
    private javax.swing.JLabel name;
    private javax.swing.JButton selectBuilding;
    private javax.swing.JLayeredPane selectBuildingPane;
    private javax.swing.JList<String> selectBuildingsList;
    private javax.swing.JButton selectEditingToolsBuildings;
    private javax.swing.JButton selectHelp;
    private javax.swing.JButton selectLogout;
    private javax.swing.JLabel title;
    private javax.swing.JLabel userIcon;
    private javax.swing.JLayeredPane userPane;
    private javax.swing.JLabel weatherIcon;
    // End of variables declaration//GEN-END:variables
}
