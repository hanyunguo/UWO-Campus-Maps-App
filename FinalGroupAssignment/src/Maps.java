
import java.awt.Component;
import java.awt.Image;
import java.awt.*;
import java.text.*;
import java.awt.geom.*;
import java.beans.JavaBean;
import java.beans.BeanProperty;
import java.beans.Transient;
import java.io.*;
import javax.swing.plaf.LabelUI;
import javax.accessibility.*;
import javax.imageio.ImageIO;
import javax.swing.*;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

/**
 * <b>Maps</b>UI For Displaying Maps
 * <p>
 * Display Multiple Floors Of Singular Building
 * </p>
 * @author Team 12
 */
public class Maps extends javax.swing.JFrame {

    Admin admin;
    User user;
    SystemDatabase sysDb;
    boolean editingMode;
    boolean editingMode_AD;
    String mapCode;
    int floorNumber;

    /**
     * Creates new form LandingPage
     */
    public Maps(Admin admin, String mC, int fN) {
        initComponents();
        // EDIT MAPCODE AND FLOORNUMBER
        this.mapCode = mC;
        this.floorNumber =fN;  
        
        // initialize user and database
        this.admin = admin;
        this.sysDb = new SystemDatabase();

        //from and store lists
        readFromPoiList("SystemDatabase/Maps/"+mC+"/"+fN+"/POIs/List/List.json"); System.out.println("Opening Map");
        readFromLayerList ("SystemDatabase/Buildings/"+mC+".json");
        readFromFloorList ("SystemDatabase/Buildings/"+mC+".json");
        displayFavourites (); 
        initialHiddenObjects();
        
        //initial map image
        try {
            mapLayer.setIcon(new ImageIcon("Images/Buildings/"+mC+"/Sizes/"+fN+"_base.png"));
            System.out.println(mapLayer.getIcon());
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showConfirmDialog(this, "Unable to disbale base map! Please check if the file exists!\nCheck directory: Images/Buildings/"+mapCode+"/Sizes/"+floorNumber+"_base.png");
        }
        setIcons();
    }

    public Maps(User user, String mC, int fN) {
        initComponents();
        // EDIT MAPCODE AND FLOORNUMBER
        this.mapCode = mC;
        this.floorNumber = fN; 
        
        // initialize user and database
        this.user = user;
        this.sysDb = new SystemDatabase();

        //read and store list
        readFromPoiList("SystemDatabase/Maps/"+mC+"/"+fN+"/POIs/List/List.json"); System.out.println("Opening Map");
        readFromLayerList ("SystemDatabase/Buildings/"+mC+".json");
        readFromFloorList ("SystemDatabase/Buildings/"+mC+".json");
        displayFavourites ();  
        initialHiddenObjects();
        
        //initial map image
        try {
            mapLayer.setIcon(new ImageIcon("Images/Buildings/"+mC+"/Sizes/"+fN+"_base.png"));
            System.out.println(mapLayer.getIcon());
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showConfirmDialog(this, "Unable to disbale base map! Please check if the file exists!\nCheck directory: Images/Buildings/"+mapCode+"/Sizes/"+floorNumber+"_base.png");
        }
        setIcons();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editingToolsAddorEdit = new javax.swing.ButtonGroup();
        mapPaneArea = new javax.swing.JScrollPane();
        layeredPane = new javax.swing.JLayeredPane();
        poiIcon = new javax.swing.JLabel();
        mapLayer = new javax.swing.JLabel();
        labelPOIName = new javax.swing.JLabel();
        displayPoiName = new javax.swing.JTextField();
        labelPOIType = new javax.swing.JLabel();
        displayPoiType = new javax.swing.JTextField();
        labelCoordinates = new javax.swing.JLabel();
        displayPoiCoordinates = new javax.swing.JTextField();
        labelPOIBuiltBy = new javax.swing.JLabel();
        displayPoiBuiltBy = new javax.swing.JTextField();
        labelPOIDescription = new javax.swing.JLabel();
        descriptionScrollPane = new javax.swing.JScrollPane();
        displayLongDescription = new javax.swing.JTextArea();
        labelUserFavourites = new javax.swing.JLabel();
        favouritesScrollPane = new javax.swing.JScrollPane();
        favouritesDisplay = new javax.swing.JTextArea();
        selectUnfavourite = new javax.swing.JButton();
        selectFavourite = new javax.swing.JButton();
        toggleLayer = new javax.swing.JButton();
        selectLayerList = new javax.swing.JComboBox<>();
        selectLayerButton = new javax.swing.JButton();
        selectPoiButton = new javax.swing.JButton();
        selectPoiList = new javax.swing.JComboBox<>();
        selectSearch = new javax.swing.JButton();
        searchTextEntry = new javax.swing.JTextField();
        selectLogOut = new javax.swing.JButton();
        selectHelp = new javax.swing.JButton();
        selectEditingTools = new javax.swing.JButton();
        selectChangeBuilding = new javax.swing.JButton();
        closeChangeFloorList = new javax.swing.JButton();
        selectChangeFloor1 = new javax.swing.JButton();
        changeFloorList = new javax.swing.JComboBox<>();
        labelEditingMode = new javax.swing.JLabel();
        labelEditingTools = new javax.swing.JLabel();
        editingSelectDelete = new javax.swing.JRadioButton();
        editingSelectEdit = new javax.swing.JRadioButton();
        editingSelectAdd1 = new javax.swing.JRadioButton();
        editingSelectButton1 = new javax.swing.JButton();
        editingSelectDeletePOI = new javax.swing.JButton();
        editingSelectCreatePOI = new javax.swing.JButton();
        Logo = new javax.swing.JLabel();
        backgroundImage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        layeredPane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        poiIcon.setIcon(new javax.swing.ImageIcon("/Users/RexGu/Documents/UWO 2022-2023/CS2212/FInal Project/group12/GroupAssignment/Images/Icons/POI_RED.png")); // NOI18N
        layeredPane.add(poiIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
        layeredPane.add(mapLayer, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        mapPaneArea.setViewportView(layeredPane);

        getContentPane().add(mapPaneArea, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 120, 600, 580));

        labelPOIName.setForeground(new java.awt.Color(204, 204, 204));
        labelPOIName.setText("POI Name");
        getContentPane().add(labelPOIName, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, -1, -1));

        displayPoiName.setEditable(false);
        displayPoiName.setBackground(new java.awt.Color(51, 51, 51));
        displayPoiName.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(displayPoiName, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 310, 190, -1));

        labelPOIType.setForeground(new java.awt.Color(204, 204, 204));
        labelPOIType.setText("POI Type");
        getContentPane().add(labelPOIType, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 400, -1, -1));

        displayPoiType.setEditable(false);
        displayPoiType.setBackground(new java.awt.Color(51, 51, 51));
        displayPoiType.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(displayPoiType, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 430, 190, -1));

        labelCoordinates.setForeground(new java.awt.Color(204, 204, 204));
        labelCoordinates.setText("Coordinates");
        getContentPane().add(labelCoordinates, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 390, -1, -1));

        displayPoiCoordinates.setEditable(false);
        displayPoiCoordinates.setBackground(new java.awt.Color(51, 51, 51));
        displayPoiCoordinates.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(displayPoiCoordinates, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 430, 190, -1));

        labelPOIBuiltBy.setForeground(new java.awt.Color(204, 204, 204));
        labelPOIBuiltBy.setText("Built By");
        getContentPane().add(labelPOIBuiltBy, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 280, -1, -1));

        displayPoiBuiltBy.setEditable(false);
        displayPoiBuiltBy.setBackground(new java.awt.Color(51, 51, 51));
        displayPoiBuiltBy.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(displayPoiBuiltBy, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 310, 190, -1));

        labelPOIDescription.setForeground(new java.awt.Color(204, 204, 204));
        labelPOIDescription.setText("POI Description");
        getContentPane().add(labelPOIDescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 490, -1, -1));

        displayLongDescription.setEditable(false);
        displayLongDescription.setBackground(new java.awt.Color(51, 51, 51));
        displayLongDescription.setColumns(20);
        displayLongDescription.setForeground(new java.awt.Color(255, 255, 255));
        displayLongDescription.setRows(5);
        descriptionScrollPane.setViewportView(displayLongDescription);

        getContentPane().add(descriptionScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 530, 190, 170));

        labelUserFavourites.setForeground(new java.awt.Color(204, 204, 204));
        labelUserFavourites.setText("User Favourites");
        getContentPane().add(labelUserFavourites, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 490, -1, -1));

        favouritesDisplay.setEditable(false);
        favouritesDisplay.setBackground(new java.awt.Color(51, 51, 51));
        favouritesDisplay.setColumns(20);
        favouritesDisplay.setForeground(new java.awt.Color(153, 153, 153));
        favouritesDisplay.setRows(5);
        favouritesScrollPane.setViewportView(favouritesDisplay);

        getContentPane().add(favouritesScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 530, 190, 170));

        selectUnfavourite.setBackground(new java.awt.Color(153, 0, 0));
        selectUnfavourite.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        selectUnfavourite.setForeground(new java.awt.Color(255, 255, 255));
        selectUnfavourite.setText("Unfavourite");
        selectUnfavourite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectUnfavouriteActionPerformed(evt);
            }
        });
        getContentPane().add(selectUnfavourite, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 670, 110, -1));

        selectFavourite.setBackground(new java.awt.Color(0, 153, 0));
        selectFavourite.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        selectFavourite.setForeground(new java.awt.Color(255, 255, 255));
        selectFavourite.setText("Favourite");
        selectFavourite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFavouriteActionPerformed(evt);
            }
        });
        getContentPane().add(selectFavourite, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 630, 110, -1));

        toggleLayer.setBackground(new java.awt.Color(51, 51, 51));
        toggleLayer.setForeground(new java.awt.Color(255, 255, 255));
        toggleLayer.setText("Hide Layer");
        toggleLayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleLayerActionPerformed(evt);
            }
        });
        getContentPane().add(toggleLayer, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 40, 110, -1));

        selectLayerList.setBackground(new java.awt.Color(51, 51, 51));
        selectLayerList.setForeground(new java.awt.Color(255, 255, 255));
        selectLayerList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectLayerListActionPerformed(evt);
            }
        });
        getContentPane().add(selectLayerList, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 170, 310, -1));

        selectLayerButton.setBackground(new java.awt.Color(51, 51, 51));
        selectLayerButton.setForeground(new java.awt.Color(255, 255, 255));
        selectLayerButton.setText("Show Layer");
        selectLayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectLayerButtonActionPerformed(evt);
            }
        });
        getContentPane().add(selectLayerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 170, -1, -1));

        selectPoiButton.setBackground(new java.awt.Color(51, 51, 51));
        selectPoiButton.setForeground(new java.awt.Color(255, 255, 255));
        selectPoiButton.setText("Select POI");
        selectPoiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectPoiButtonActionPerformed(evt);
            }
        });
        getContentPane().add(selectPoiButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 120, 100, -1));

        selectPoiList.setBackground(new java.awt.Color(51, 51, 51));
        selectPoiList.setForeground(new java.awt.Color(255, 255, 255));
        selectPoiList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectPoiListActionPerformed(evt);
            }
        });
        getContentPane().add(selectPoiList, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, 310, -1));

        selectSearch.setBackground(new java.awt.Color(51, 51, 51));
        selectSearch.setForeground(new java.awt.Color(255, 255, 255));
        selectSearch.setText("Search POIs");
        selectSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectSearchActionPerformed(evt);
            }
        });
        getContentPane().add(selectSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 90, 110, -1));

        searchTextEntry.setBackground(new java.awt.Color(51, 51, 51));
        searchTextEntry.setForeground(new java.awt.Color(255, 255, 255));
        searchTextEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextEntryActionPerformed(evt);
            }
        });
        getContentPane().add(searchTextEntry, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 90, 470, -1));

        selectLogOut.setBackground(new java.awt.Color(51, 51, 51));
        selectLogOut.setForeground(new java.awt.Color(255, 255, 255));
        selectLogOut.setText("Logout");
        selectLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectLogOutActionPerformed(evt);
            }
        });
        getContentPane().add(selectLogOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 40, -1, -1));

        selectHelp.setBackground(new java.awt.Color(51, 51, 51));
        selectHelp.setForeground(new java.awt.Color(255, 255, 255));
        selectHelp.setText("Help");
        selectHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectHelpActionPerformed(evt);
            }
        });
        getContentPane().add(selectHelp, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 40, -1, -1));

        selectEditingTools.setBackground(new java.awt.Color(51, 51, 51));
        selectEditingTools.setForeground(new java.awt.Color(255, 255, 255));
        selectEditingTools.setText("Editing Tools");
        selectEditingTools.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectEditingToolsActionPerformed(evt);
            }
        });
        getContentPane().add(selectEditingTools, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 40, -1, -1));

        selectChangeBuilding.setBackground(new java.awt.Color(51, 51, 51));
        selectChangeBuilding.setForeground(new java.awt.Color(255, 255, 255));
        selectChangeBuilding.setText("Change Building");
        selectChangeBuilding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectChangeBuildingActionPerformed(evt);
            }
        });
        getContentPane().add(selectChangeBuilding, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, -1, -1));

        closeChangeFloorList.setBackground(new java.awt.Color(102, 0, 0));
        closeChangeFloorList.setForeground(new java.awt.Color(255, 255, 255));
        closeChangeFloorList.setText("x");
        closeChangeFloorList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeChangeFloorListActionPerformed(evt);
            }
        });
        getContentPane().add(closeChangeFloorList, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 70, -1, -1));

        selectChangeFloor1.setBackground(new java.awt.Color(51, 51, 51));
        selectChangeFloor1.setForeground(new java.awt.Color(255, 255, 255));
        selectChangeFloor1.setText("Floors");
        selectChangeFloor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectChangeFloor1ActionPerformed(evt);
            }
        });
        getContentPane().add(selectChangeFloor1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 40, 110, -1));

        changeFloorList.setBackground(new java.awt.Color(51, 51, 51));
        changeFloorList.setForeground(new java.awt.Color(255, 255, 255));
        changeFloorList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeFloorListActionPerformed(evt);
            }
        });
        getContentPane().add(changeFloorList, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 70, 110, -1));

        labelEditingMode.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        labelEditingMode.setForeground(new java.awt.Color(255, 255, 255));
        labelEditingMode.setText("Editing Mode");
        getContentPane().add(labelEditingMode, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, -1, -1));

        labelEditingTools.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        labelEditingTools.setForeground(new java.awt.Color(255, 255, 255));
        labelEditingTools.setText("Editing Tools");
        getContentPane().add(labelEditingTools, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 100, -1, -1));

        editingToolsAddorEdit.add(editingSelectDelete);
        editingSelectDelete.setForeground(new java.awt.Color(255, 255, 255));
        editingSelectDelete.setText("Delete POI");
        editingSelectDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editingSelectDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(editingSelectDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 230, -1, -1));

        editingToolsAddorEdit.add(editingSelectEdit);
        editingSelectEdit.setForeground(new java.awt.Color(255, 255, 255));
        editingSelectEdit.setSelected(true);
        editingSelectEdit.setText("Edit POI");
        editingSelectEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editingSelectEditActionPerformed(evt);
            }
        });
        getContentPane().add(editingSelectEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 170, -1, -1));

        editingToolsAddorEdit.add(editingSelectAdd1);
        editingSelectAdd1.setForeground(new java.awt.Color(255, 255, 255));
        editingSelectAdd1.setText("Add POI");
        editingSelectAdd1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editingSelectAdd1ActionPerformed(evt);
            }
        });
        getContentPane().add(editingSelectAdd1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 200, -1, -1));

        editingSelectButton1.setBackground(new java.awt.Color(76, 51, 76));
        editingSelectButton1.setForeground(new java.awt.Color(255, 255, 255));
        editingSelectButton1.setText("Select");
        editingSelectButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editingSelectButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(editingSelectButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 270, -1, -1));

        editingSelectDeletePOI.setBackground(new java.awt.Color(102, 0, 0));
        editingSelectDeletePOI.setForeground(new java.awt.Color(255, 255, 255));
        editingSelectDeletePOI.setText("Delete POI");
        editingSelectDeletePOI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editingSelectDeletePOIActionPerformed(evt);
            }
        });
        getContentPane().add(editingSelectDeletePOI, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 120, 120, -1));

        editingSelectCreatePOI.setBackground(new java.awt.Color(76, 51, 76));
        editingSelectCreatePOI.setForeground(new java.awt.Color(255, 255, 255));
        editingSelectCreatePOI.setText("Create POI");
        editingSelectCreatePOI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editingSelectCreatePOIActionPerformed(evt);
            }
        });
        getContentPane().add(editingSelectCreatePOI, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, 440, -1));

        Logo.setIcon(new javax.swing.ImageIcon("/Users/RexGu/Documents/UWO 2022-2023/CS2212/FInal Project/group12/GroupAssignment/Images/Icons/UWO_LOGO_TINY.png")); // NOI18N
        getContentPane().add(Logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, -20, 160, 150));

        backgroundImage.setIcon(new javax.swing.ImageIcon("/Users/RexGu/Documents/UWO 2022-2023/CS2212/FInal Project/group12/GroupAssignment/Images/Icons/ALUMNI_HALL.jpg")); // NOI18N
        getContentPane().add(backgroundImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Help button action performed
     * @param evt 
     */
    private void selectHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectHelpActionPerformed
        // TODO add your handling code here:
        String helpMsg = "Welcome To The G12 Western Map Database\n(1)Start by logging in to your account.\n(2)Select a building and browse its maps.\n(3)Favourite POIs and create your own\n(4)Admin users have developer rights and can edit more functions.\n(5)View the current weather.";
        JOptionPane.showMessageDialog(this, helpMsg);
    }//GEN-LAST:event_selectHelpActionPerformed

    /**
     * Logout button action performed
     * @param evt 
     */
    private void selectLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectLogOutActionPerformed
        // TODO add your handling code here:
        this.dispose();
        LandingPage goBack = new LandingPage();
        goBack.setVisible(true);
    }//GEN-LAST:event_selectLogOutActionPerformed

    /**
     * Close change floor button action performed
     * @param evt 
     */
    private void closeChangeFloorListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeChangeFloorListActionPerformed
        // TODO add your handling code here:
        refreshPage();
    }//GEN-LAST:event_closeChangeFloorListActionPerformed

    /**
     * Editing tools button action performed
     * @param evt 
     */
    private void selectEditingToolsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectEditingToolsActionPerformed
        // TODO add your handling code here:
        if (selectEditingTools.getText().equals("Editing Tools")) {
            selectEditingTools.setText("Standard Mode");
            selectSearch.setText("Pinpoint");
            if (admin != null) { 
            // IF ADMIN
                String msg = "You have developer privileges! You may only do the following:\n(1)Create, Edit, and Delete Built-In POIs\n(2)Favourite a POI\nImportant: Please go to the \"Change Buildings\" page to edit buildings and floors.";
                JOptionPane.showMessageDialog(this, msg);
            } 
            else { 
            // IF USER
                String msg = "You do not have developer privileges! You may only do the following:\n(1)Create and Edit User Defined POI\n(2)Favourite a POI\n";
                JOptionPane.showMessageDialog(this, msg);
            }
            this.editingMode = true;
            showEditingDisplay1();
            labelEditingTools.show();
            labelEditingMode.show();
            selectFavourite.hide();
            selectUnfavourite.hide();
        } else {
            refreshPage();
        }
    }//GEN-LAST:event_selectEditingToolsActionPerformed

    /**
     * Change floor button action performed
     * @param evt 
     */
    private void selectChangeBuildingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectChangeBuildingActionPerformed
        // TODO add your handling code here:
        if (admin == null) {
            this.dispose();
            SelectBuilding sb = new SelectBuilding(user);
            sb.setVisible(true);
        } else {
            this.dispose();
            SelectBuilding sb = new SelectBuilding(admin);
            sb.setVisible(true);
        }
    }//GEN-LAST:event_selectChangeBuildingActionPerformed
 
    private void selectPoiListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectPoiListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectPoiListActionPerformed

    /**
     * POI list button action performed
     * @param evt 
     */
    private void selectPoiButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectPoiButtonActionPerformed
        // TODO add your handling code here:
        String selectedPoiName = selectPoiList.getSelectedItem().toString();
        
        // EDITING MODE
        if (editingMode == true && editingMode_AD == false) {
            modifyPoi (selectedPoiName, mapCode, floorNumber);
        }
        
        // STANDARD MODE
        else {
            Poi poi = sysDb.getPoi(selectedPoiName, mapCode, floorNumber);

            String builtBy = "";
            displayPoiName.setText(poi.getName());
            displayPoiType.setText(poi.getType());
            displayLongDescription.setText(poi.getDescription());
            if (poi.isBuiltIn() == true) {
                builtBy = "Admin";
            } else {
                builtBy = "User";
            }
            displayPoiBuiltBy.setText(builtBy);
            displayPoiCoordinates.setText("(" + poi.xCoordinate() + "," + poi.yCoordinate() + ")");
            poiIcon.move(poi.xCoordinate(), poi.yCoordinate());
            poiIcon.show();
            selectFavourite.show();
            selectUnfavourite.show();
        } 
    }//GEN-LAST:event_selectPoiButtonActionPerformed

    private void selectLayerListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectLayerListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectLayerListActionPerformed

    /**
     * select layer button action performed
     * @param evt 
     */
    private void selectLayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectLayerButtonActionPerformed
        // TODO add your handling code here:

        // STANDARD MODE
        if (editingMode == false) {
            toggleLayer.show();
            String layerName = selectLayerList.getSelectedItem().toString();
            changeMapFloorImage(layerName);
        } // EDITING MODE
        else {
            displayPoiType.setText(selectLayerList.getSelectedItem().toString());
        }

    }//GEN-LAST:event_selectLayerButtonActionPerformed

    private void searchTextEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextEntryActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_searchTextEntryActionPerformed

    /**
     * Search button action performed
     * @param evt 
     */
    private void selectSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectSearchActionPerformed
        // TODO add your handling code here:
        if (editingMode == false) { // STANDARD MODE
            String searchEntry = searchTextEntry.getText();
            Poi poi = sysDb.getPoi(searchEntry, mapCode, floorNumber);
            if (poi != null) {
                poiIcon.show();
                String builtBy = "";
                displayPoiName.setText(poi.getName());
                displayPoiType.setText(poi.getType());
                displayLongDescription.setText(poi.getDescription());
                if (poi.isBuiltIn() == true) {
                    builtBy = "Admin";
                } else {
                    builtBy = "User";
                }
                displayPoiBuiltBy.setText(builtBy);
                displayPoiCoordinates.setText("(" + poi.xCoordinate() + "," + poi.yCoordinate() + ")");
                poiIcon.move(poi.xCoordinate(), poi.yCoordinate());

            } else {
                System.out.println("POI not found");
                JOptionPane.showMessageDialog(this, "Search result: Point of Interest (POI) \""+searchEntry+"\" not found.");
                this.dispose();
                if (admin != null) {
                    Maps refresh = new Maps(admin, mapCode, floorNumber);
                    refresh.setVisible(true);
                } else {
                    Maps refresh = new Maps(user, mapCode, floorNumber);
                    refresh.setVisible(true);
                }

            }
        }
        else { // EDITING MODE
            String coordinates = displayPoiCoordinates.getText();
            System.out.println(coordinates);
            try {
                String[] cParts = coordinates.split(",");
                int x = Integer.parseInt(cParts[0]);
                int y = Integer.parseInt(cParts[1]);
                poiIcon.move(x, y);
                poiIcon.show();
            }
            catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Enter an x and y coordinate and then select 'Pinpoint'\nto see the derived map location. E.g. '100,70'");
            }
        }
    }//GEN-LAST:event_selectSearchActionPerformed

    /**
     * Toggle Layer button action performed
     * @param evt 
     */
    private void toggleLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleLayerActionPerformed
        // TODO add your handling code here:
        changeMapFloorImage("base");
        toggleLayer.hide();
    }//GEN-LAST:event_toggleLayerActionPerformed


    private void editingSelectEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editingSelectEditActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_editingSelectEditActionPerformed

    private void editingSelectDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editingSelectDeleteActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_editingSelectDeleteActionPerformed

    /**
     * Editing select button action performed
     * @param evt 
     */
    private void editingSelectButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editingSelectButton1ActionPerformed
        // TODO add your handling code here:
        if (editingSelectEdit.isSelected()) { // EDITING MODE
            
            hideEditingDisplay1();
            themeEditingMode1Enable();
        } else if (editingSelectAdd1.isSelected()) { // ADDING MODE
            editingMode_AD = true;
            hideEditingDisplay1();
            themeEditingMode2Enable();
        } else if (editingSelectDelete.isSelected()) { // DELETE MODE
            editingMode_AD = true;
            themeEditingMode3Enable();
        }
    }//GEN-LAST:event_editingSelectButton1ActionPerformed

    private void editingSelectAdd1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editingSelectAdd1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editingSelectAdd1ActionPerformed

    /**
     * Editing create POI action performed
     * @param evt 
     */
    private void editingSelectCreatePOIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editingSelectCreatePOIActionPerformed
        // TODO add your handling code here:
        String newPoiName = displayPoiName.getText();
        if (newPoiName.equals("")){
            JOptionPane.showMessageDialog(this, "All fields are mandatory");
        }
        boolean completed = addPoi(newPoiName, mapCode, floorNumber);
        if (completed){selectPoiList.addItem(newPoiName);
            writeToPoiList(mapCode, floorNumber);
            refreshPage();
        }
        else{
            System.out.println("Please try again");
        }
    }//GEN-LAST:event_editingSelectCreatePOIActionPerformed

    /**
     * Editing delete POI action performed
     * @param evt 
     */
    private void editingSelectDeletePOIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editingSelectDeletePOIActionPerformed
        // TODO add your handling code here:
        String selectedPoiName = selectPoiList.getSelectedItem().toString();
        removeFromPoiList(selectedPoiName);
    }//GEN-LAST:event_editingSelectDeletePOIActionPerformed

    /**
     * Favourites button action performed
     * @param evt 
     */
    private void selectFavouriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFavouriteActionPerformed
        // TODO add your handling code here:
        boolean unsuccess = writeToUserFavourites(mapCode);
        if (unsuccess) {
            JOptionPane.showMessageDialog(this, "Unable to add favourite");
        }
        refreshPage();
    }//GEN-LAST:event_selectFavouriteActionPerformed

    /**
     * Unfavourites button action performed
     * @param evt 
     */
    private void selectUnfavouriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectUnfavouriteActionPerformed
        // TODO add your handling code here:
        boolean success = removeFromUserFavourites(mapCode);
        if (!success) {
            JOptionPane.showMessageDialog(this, "Unable to delete favourite");
        }
        refreshPage();
    }//GEN-LAST:event_selectUnfavouriteActionPerformed

    /**
     * Change floor
     * @param evt 
     */
    private void selectChangeFloor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectChangeFloor1ActionPerformed
        // TODO add your handling code here:
        if (selectChangeFloor1.getText().toString().equals("Change Floor") ){
            // ADD CODE HERE
            if (changeFloorList.getSelectedItem().equals("Floor 1")) {
                switchFloors(1);
            }
            else if (changeFloorList.getSelectedItem().equals("Floor 2")) {
                switchFloors(2);
            }
            else if (changeFloorList.getSelectedItem().equals("Floor 3")) {
                switchFloors(3);
            }
            else if (changeFloorList.getSelectedItem().equals("Floor 4")) {
                switchFloors(4);
            }
            else if (changeFloorList.getSelectedItem().equals("Floor 5")) {
                switchFloors(5);
            }
            else {
                JOptionPane.showMessageDialog(this, "There is no associated map for this floor.");
            }
            
        }
        changeFloorList.show();
        closeChangeFloorList.show();
        selectChangeFloor1.setText("Change Floor");
    }//GEN-LAST:event_selectChangeFloor1ActionPerformed
    
    /**
     * Floor list component
     * @param evt 
     */
    private void changeFloorListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeFloorListActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_changeFloorListActionPerformed

    /**
     * Hide the editing tool icon
     */
    private void hideEditingDisplay1() {
        editingSelectButton1.hide();
        editingSelectDelete.hide();
        editingSelectEdit.hide();
        editingSelectAdd1.hide();
    }

    /**
     * Display the editing tool icon
     */
    private void showEditingDisplay1() {
        if (admin != null) {
            editingSelectDelete.show();
        }
        
        editingSelectButton1.show();
        editingSelectEdit.show();
        editingSelectAdd1.show();
    }

    /**
     * Show and hide icon for them Editing Mode
     */
    private void themeEditingMode1Enable() {
        // EDIT/SELECT POI BUTTON
        selectPoiButton.setText("Edit POI");
        selectPoiButton.setBackground(Color.GREEN);
        selectPoiButton.setForeground(Color.BLACK);

        // POI LAYER TYPE
        selectLayerButton.setText("Choose Type");
        selectLayerButton.setBackground(Color.DARK_GRAY);
        selectLayerButton.setForeground(Color.WHITE);

        // MAKE VALUES EDITABLE
        displayPoiName.setEditable(true);
        displayLongDescription.setEditable(true);
        displayPoiCoordinates.setEditable(true);
        displayPoiCoordinates.setText("x,y (Replace Values)");
        if (admin != null) {
            displayPoiBuiltBy.setText("Admin");
        } else {
            displayPoiBuiltBy.setText("User");
        }

        // CHANGE FIELD COLOURS
        displayPoiName.setBackground(Color.WHITE);
        displayPoiName.setForeground(Color.BLACK);
        displayLongDescription.setBackground(Color.WHITE);
        displayLongDescription.setForeground(Color.BLACK);
        displayPoiCoordinates.setBackground(Color.WHITE);
        displayPoiCoordinates.setForeground(Color.BLACK);
    }
    
    private void themeEditingMode2Enable() {
        editingSelectCreatePOI.show();
        selectPoiList.hide();
        selectPoiButton.hide();
        // POI LAYER TYPE
        selectLayerButton.setText("Choose Type");
        selectLayerButton.setBackground(Color.DARK_GRAY);
        selectLayerButton.setForeground(Color.WHITE);

        // MAKE VALUES EDITABLE
        displayPoiName.setEditable(true);
        displayLongDescription.setEditable(true);
        displayPoiCoordinates.setEditable(true);
        displayPoiCoordinates.setText("x,y (Replace Values)");
        if (admin != null) {
            displayPoiBuiltBy.setText("Admin");
        } else {
            displayPoiBuiltBy.setText("User");
        }

        // CHANGE FIELD COLOURS
        displayPoiName.setBackground(Color.WHITE);
        displayPoiName.setForeground(Color.BLACK);
        displayLongDescription.setBackground(Color.WHITE);
        displayLongDescription.setForeground(Color.BLACK);
        displayPoiCoordinates.setBackground(Color.WHITE);
        displayPoiCoordinates.setForeground(Color.BLACK);
    }
    
    private void themeEditingMode3Enable() {
        
        selectPoiButton.hide();
        selectLayerButton.hide();
        selectLayerList.hide();
        editingSelectDeletePOI.show();
    }
    
    /**
     * refresh the page with a new map
     */
    private void refreshPage() {
        this.dispose();
        if (admin != null) {
            Maps refresh = new Maps(admin, mapCode, floorNumber);
            refresh.setVisible(true);
        } else {
            Maps refresh = new Maps(user, mapCode, floorNumber);
            refresh.setVisible(true);
        }
    }
    
    /**
     * Modify the POI
     * @param selectedPoiName
     * @param mapCode
     * @param floorNumber 
     */
    private void modifyPoi(String selectedPoiName, String mapCode, int floorNumber) {
        JSONObject poiFile = new JSONObject();
        System.out.print("Searching for poi: " + selectedPoiName + "\n");
        Poi originalPoi = sysDb.getPoi(selectedPoiName, mapCode, floorNumber);

        // MODIFY POI VALUES
        if (!displayLongDescription.getText().equals("")) {
            // DESCRIPTION
            poiFile.put("Description", displayLongDescription.getText());
        } else {
            poiFile.put("Description", originalPoi.getDescription());
        }

        if (!displayPoiBuiltBy.getText().equals("")) {
            // BUILT BY
            poiFile.put("Built By", displayPoiBuiltBy.getText());
        }

        if (!displayPoiCoordinates.getText().equals("")) {
            // COORDINATES
            if (displayPoiCoordinates.getText().contains(",")) {
                String[] coordinate = displayPoiCoordinates.getText().split(",");
                try {
                    // TEST IF VALUES ARE INTEGERS
                    int x = Integer.parseInt(coordinate[0]);
                    int y = Integer.parseInt(coordinate[1]);
                    // STORE AS STRINGS
                    poiFile.put("x", coordinate[0]);
                    poiFile.put("y", coordinate[1]);
                    

                } catch (Exception e) {
                    System.out.println("Error: Wrong Format");
                    String xVal = Integer.toString(originalPoi.xCoordinate());
                    String yVal = Integer.toString(originalPoi.yCoordinate());
                    poiFile.put("y", yVal);
                    poiFile.put("x", xVal);
                }
            } else {
                System.out.println("Error: Invalid entry for Coordinates");
                String xVal = Integer.toString(originalPoi.xCoordinate());
                String yVal = Integer.toString(originalPoi.yCoordinate());
                poiFile.put("y", yVal);
                poiFile.put("x", xVal);
            }
        } else {
            String xVal = Integer.toString(originalPoi.xCoordinate());
            String yVal = Integer.toString(originalPoi.yCoordinate());
            poiFile.put("y", yVal);
            poiFile.put("x", xVal);
        }

        if (!displayPoiType.getText().equals("")) { // IF NOT EMPTY (For each entry)
            // TYPE
            poiFile.put("Type", displayPoiType.getText());
        } else {
            poiFile.put("Type", originalPoi.getType());
        }

        if (!displayPoiName.getText().equals("")) { // IF NOT EMPTY (For each entry)
            // NAME
            poiFile.put("Name", displayPoiName.getText());
        } else {
            poiFile.put("Name", originalPoi.getName());
        }

        String filename = selectedPoiName + ".json";
        String filePath = "SystemDatabase/Maps/" + mapCode + "/" + floorNumber + "/POIs/" + filename;
        
        
        //READ
        JSONParser jsonParser = new JSONParser();
        try (FileReader reader = new FileReader(filePath)){
            Object obj = jsonParser.parse(reader);
            JSONObject poiJson = (JSONObject) obj;
            if (poiJson.get("Built By").toString().trim().toUpperCase().equals("ADMIN") && user != null) {
                JOptionPane.showMessageDialog(this, "A standard user does not have access to editing Built-In POIs.");
                refreshPage();
            }
            else { // continue
                try ( FileWriter fileWriter = new FileWriter(filePath)) {
                    fileWriter.write(poiFile.toString());
                    fileWriter.close();;
                } catch (Exception e) { System.out.println("Could not write to file"); }
            }
        } catch (Exception e) { e.printStackTrace(); }

        // WRITE FILE TO JSON
        
        //System.out.println("\nAdded to our file(\"" + filename + "\"):" + usrDbFile);   

        refreshPage();
    }
    
    /**
     * Add the new pois
     * @param selectedPoiName
     * @param mapCode
     * @param floorNumber
     * @return 
     */
    private boolean addPoi(String selectedPoiName, String mapCode, int floorNumber) {
        JSONObject poiFile = new JSONObject();
        System.out.print("Searching for poi: " + selectedPoiName + "\n");
        Poi originalPoi = sysDb.getPoi(selectedPoiName, mapCode, floorNumber);
        boolean filled = true;

        // MODIFY POI VALUES
        if (!displayLongDescription.getText().equals("")) {
            // DESCRIPTION
            poiFile.put("Description", displayLongDescription.getText());
        } else {
            filled = false;
        }

        if (!displayPoiBuiltBy.getText().equals("")) {
            // BUILT BY
            poiFile.put("Built By", displayPoiBuiltBy.getText());
        }

        if (!displayPoiCoordinates.getText().equals("")) {
            // COORDINATES
            if (displayPoiCoordinates.getText().contains(",")) {
                String[] coordinate = displayPoiCoordinates.getText().split(",");
                try {
                    // TEST IF VALUES ARE INTEGERS
                    int x = Integer.parseInt(coordinate[0]);
                    int y = Integer.parseInt(coordinate[1]);
                    // STORE AS STRINGS
                    poiFile.put("y", coordinate[1]);
                    poiFile.put("x", coordinate[0]);

                } catch (Exception e) {
                    System.out.println("Error: Wrong Format");
                    poiFile.put("y", "0");
                    poiFile.put("x", "0");
                }
            } else {
                System.out.println("Error: Invalid entry for Coordinates");
                poiFile.put("y", "0");
                poiFile.put("x", "0");
            }
        } else {
            filled = false;
        }

        if (!displayPoiType.getText().equals("")) { // IF NOT EMPTY (For each entry)
            // TYPE
            poiFile.put("Type", displayPoiType.getText());
        } else {
            filled = false;
        }

        if (!displayPoiName.getText().equals("")) { // IF NOT EMPTY (For each entry)
            // NAME
            poiFile.put("Name", displayPoiName.getText());
        } else {
            filled = false;
        }

        String filename = selectedPoiName + ".json";
        String filePath = "SystemDatabase/Maps/" + mapCode + "/" + floorNumber + "/POIs/" + filename;

        if (filled) { // WRITE FILE TO JSON
            try ( FileWriter fileWriter = new FileWriter(filePath)) {
                fileWriter.write(poiFile.toString());
                fileWriter.close();
            } catch (Exception e) {
                System.out.println("Could not write to file");
            }
        } else { JOptionPane.showMessageDialog(this, "All fields are mandatory"); }
        
        return filled;
    }

    /**
     * Write the poi list
     * @param mapCode
     * @param floorNumber 
     */
    private void writeToPoiList(String mapCode, int floorNumber) {
        int itemCount = selectPoiList.getItemCount();
        //String[] poiList = new String[itemCount];
        
        JSONArray jArray = new JSONArray();
        for (int i = 0; i < itemCount; i++) {
            JSONObject jObject = new JSONObject();
            jObject.put("Poi", selectPoiList.getItemAt(i));
            System.out.println("Writing poi to JSON list: " + selectPoiList.getItemAt(i));
            jArray.add(jObject);
        }
        // WRITE FILE TO JSON
        String filePath = "SystemDatabase/Maps/" + mapCode + "/" + floorNumber + "/POIs/List/List.json";
        try ( FileWriter fileWriter = new FileWriter(filePath)) {
            fileWriter.write(jArray.toString());
            fileWriter.close();;
        } catch (Exception e) {
            System.out.println("Could not write to file");
        }
    }
    
    /**
     * Write the POI to POI list within JSON file
     * @param jArray
     * @param mapCode
     * @param floorNumber 
     */
    private void writeToPoiList(JSONArray jArray, String mapCode, int floorNumber) {

        // WRITE FILE TO JSON
        String filePath = "SystemDatabase/Maps/" + mapCode + "/" + floorNumber + "/POIs/List/List.json";
        try ( FileWriter fileWriter = new FileWriter(filePath)) {
            fileWriter.write(jArray.toString());
            fileWriter.close();;
        } catch (Exception e) {
            System.out.println("Could not write to file");
        }
    }
    
    /**
     * Read the JSON file from the POI list
     * @param filePath 
     */
    private void readFromPoiList (String filePath) {
        JSONParser jP = new JSONParser();
        
        try (FileReader reader = new FileReader(filePath)) {
            Object obj = jP.parse(reader);
            JSONArray list = (JSONArray) obj;
            int size = list.size();
            Object[] arrayList = list.toArray();
            for (int i=0; i<size;i++){
                JSONObject jObject = (JSONObject) arrayList[i];
                System.out.println("Found poi: " + jObject.get("Poi"));
                selectPoiList.addItem(jObject.get("Poi").toString());
            }
        }
        catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Delete the POI from the POI list
     * @param selectedPoiName 
     */
    private void removeFromPoiList (String selectedPoiName) {
        String filePath = "SystemDatabase/Maps/" + mapCode + "/" + floorNumber + "/POIs/List/List.json";
        String poisPath = "SystemDatabase/Maps/" + mapCode + "/" + floorNumber + "/POIs/";
        JSONParser jP = new JSONParser();
        
        try (FileReader reader = new FileReader(filePath)) {
            Object obj = jP.parse(reader);
            JSONArray list = (JSONArray) obj;
            JSONArray newList = new JSONArray();
            int size = list.size();
            Object[] arrayList = list.toArray();
            
            System.out.println("Creating a new list with all pois");
            for (int i=0; i<size;i++){
                JSONObject jObject = (JSONObject) arrayList[i];
                if (jObject.get("Poi").equals(selectedPoiName)){
                    System.out.println("Found a match... ignoring poi: " + jObject.get("Poi"));
                    File f = new File (poisPath + jObject.get("Poi") +".json");
                    if (f.delete())
                        System.out.println("Deleted");
                    else
                        System.out.println("Unable to delete JSON file from local directory");
                }
                else {
                    newList.add(jObject);
                }
            }
            writeToPoiList(newList,this.mapCode, this.floorNumber);
            refreshPage();
        }
        catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Read from Floor List contained within JSON File
     * @param filePath 
     */
    private void readFromFloorList (String filePath) {
        JSONParser jP = new JSONParser();
        
        try (FileReader reader = new FileReader(filePath)) {
            Object obj = jP.parse(reader);
            JSONObject jsonObject = (JSONObject) obj;
            JSONArray list = (JSONArray) jsonObject.get("maps");
            int size = list.size();
            Object[] arrayList = list.toArray();
            for (int i=0; i<size;i++){
                JSONObject jObject = (JSONObject) arrayList[i];
                System.out.println("Found: " + jObject.get("name"));
                if (!(jObject.get("visible").toString().equals("0"))) {
                    System.out.println("The following key is visible: " + jObject.get("name"));
                    changeFloorList.addItem(jObject.get("name").toString());
                }
            }
        }
        catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Read from Layer List contained within JSON File
     * @param filePath 
     */
    private void readFromLayerList (String filePath) {
        JSONParser jP = new JSONParser();
        
        try (FileReader reader = new FileReader(filePath)) {
            Object obj = jP.parse(reader);
            JSONObject jsonObject = (JSONObject) obj;
            JSONArray maps = (JSONArray) jsonObject.get("maps");
            Object[] mapsArray = maps.toArray();
            String floor = "Floor " + this.floorNumber;
            JSONObject floorObject = new JSONObject();
            for (int i=0; i<mapsArray.length;i++) {
                if (floor.equals(((JSONObject)mapsArray[i]).get("name").toString())){
                    floorObject = (JSONObject)mapsArray[i];
                    break;
                }
            }
            JSONArray layers = (JSONArray) floorObject.get("layers");
            int size = layers.size();
            Object[] arrayList = layers.toArray();
            for (int i=0; i<size;i++){
                //JSONObject jObject = (JSONObject) arrayList[i];
                System.out.println("Found: " + arrayList[i].toString());
                selectLayerList.addItem(arrayList[i].toString());
            }
        }
        catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Write a favourite poi to the User's favourite poi list
     * @param mapCode
     * @return return false if does not exist in the json file
     */
    private boolean writeToUserFavourites (String mapCode) {
        boolean exist = false;
        JSONParser jParse = new JSONParser();
        String poiSelected = selectPoiList.getSelectedItem().toString();
        if (admin == null) { // IF USER
            String filePath = "UserDatabase/"+user.viewUserName()+".json";
            try (FileReader reader = new FileReader(filePath)) {
                Object obj = jParse.parse(reader);
                JSONObject userJsonObj = (JSONObject) obj;
                System.out.println("Attempting to modify favourites for "+userJsonObj.get("Username"));
                JSONArray jsonArray = (JSONArray) userJsonObj.get("Pois");
                Object[] array = jsonArray.toArray();
                for (int i=0; i<array.length; i++) {
                    String itemName = ((JSONObject) array[i]).get("Favourite").toString();
                    System.out.println("Scanning item: " + itemName);
                    if (itemName.equals(poiSelected)){
                        exist = true;
                        System.out.println("Error: Found a match cannot modify");
                        break;
                    }
                }
                if (!exist){
                    System.out.println("No match found. Now modifying...\nCreating new JSON Object\nRestoring all favourites in an array of size " + array.length+1);
                    JSONObject user = new JSONObject();
                    JSONArray newFavs = new JSONArray();
                    for (int j=0; j<array.length;j++){
                        JSONObject singleFav = (JSONObject) array[j];
                        newFavs.add(singleFav);
                        System.out.println("Added " +singleFav+ " to "+newFavs);
                    }
                    JSONObject singleFav = new JSONObject();
                    singleFav.put("Favourite", poiSelected);
                    newFavs.add(singleFav);
                    user.put("Username", userJsonObj.get("Username"));  System.out.println("Setting username to: " + userJsonObj.get("Username").toString());
                    user.put("Password", userJsonObj.get("Password"));  System.out.println("Setting password to: " + userJsonObj.get("Password").toString());
                    user.put("Pois", newFavs);                              System.out.println("Setting favourites to: " + newFavs.toString());
                    FileWriter fileWriter = new FileWriter (filePath);
                    System.out.print(user.toString() + "\n");
                    fileWriter.write(user.toString());
                    fileWriter.close();
                }
                
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
            catch (Exception e) {
                e.printStackTrace();
            }
        }
        else { // IF ADMIN
            String filePath = "UserDatabase/"+admin.viewadminName()+".json";
            try (FileReader reader = new FileReader(filePath)) {
                Object obj = jParse.parse(reader);
                JSONObject userJsonObj = (JSONObject) obj;
                System.out.println("Attempting to modify favourites for "+userJsonObj.get("Username"));
                JSONArray jsonArray = (JSONArray) userJsonObj.get("Pois");
                Object[] array = jsonArray.toArray();
                for (int i=0; i<array.length; i++) {
                    String itemName = ((JSONObject) array[i]).get("Favourite").toString();
                    System.out.println("Scanning item: " + itemName);
                    if (itemName.equals(poiSelected)){
                        exist = true;
                        System.out.println("Error: Found a match cannot modify");
                        break;
                    }
                }
                if (!exist){
                    System.out.println("No match found. Now modifying...\nCreating new JSON Object\nRestoring all favourites in an array of size " + array.length+1);
                    JSONObject user = new JSONObject();
                    JSONArray newFavs = new JSONArray();
                    for (int j=0; j<array.length;j++){
                        JSONObject singleFav = (JSONObject) array[j];
                        newFavs.add(singleFav);
                        System.out.println("Added " +singleFav+ " to "+newFavs);
                    }
                    JSONObject singleFav = new JSONObject();
                    singleFav.put("Favourite", poiSelected);
                    newFavs.add(singleFav);
                    user.put("Adminname", userJsonObj.get("Adminname"));  System.out.println("Setting username to: " + userJsonObj.get("Adminname").toString());
                    user.put("Password", userJsonObj.get("Password"));  System.out.println("Setting password to: " + userJsonObj.get("Password").toString());
                    user.put("Pois", newFavs);                              System.out.println("Setting favourites to: " + newFavs.toString());
                    FileWriter fileWriter = new FileWriter (filePath);
                    System.out.print(user.toString() + "\n");
                    fileWriter.write(user.toString());
                    fileWriter.close();
                }
                
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
            catch (Exception e) {
                e.printStackTrace();
            }
        }
        return exist;
    }
    
    /**
     * Remove a favourite Poi from the User's favourites list
     * @param mapCode
     * @return false if does not exist in the json file
     */
    private boolean removeFromUserFavourites (String mapCode) {
        boolean exist = false;
        JSONParser jParse = new JSONParser();
        String poiSelected = selectPoiList.getSelectedItem().toString();
        if (admin == null) { // IF USER
            String filePath = "UserDatabase/"+user.viewUserName()+".json";
            try (FileReader reader = new FileReader(filePath)) {
                Object obj = jParse.parse(reader);
                JSONObject userJsonObj = (JSONObject) obj;
                System.out.println("Attempting to modify favourites for "+userJsonObj.get("Username"));
                JSONArray jsonArray = (JSONArray) userJsonObj.get("Pois");
                Object[] array = jsonArray.toArray();
                
                JSONArray newFavs = new JSONArray();
                for (int i=0; i<array.length; i++) {
                    String itemName = ((JSONObject) array[i]).get("Favourite").toString();
                    System.out.println("Scanning item: " + itemName);
                    if (itemName.equals(poiSelected)){
                        exist = true;
                        System.out.println("Success!");
                        
                    }
                    else {
                        System.out.println("Error: POI does not exists in list");
                        newFavs.add((JSONObject) array[i]);
                        System.out.println("Added " +itemName+ " to "+newFavs);
                    }
                }
                if (exist){
                    System.out.println("Now deleting...");
                    JSONObject user = new JSONObject();
                    user.put("Username", userJsonObj.get("Username"));  System.out.println("Setting username to: " + userJsonObj.get("Username").toString());
                    user.put("Password", userJsonObj.get("Password"));  System.out.println("Setting password to: " + userJsonObj.get("Password").toString());
                    user.put("Pois", newFavs);                              System.out.println("Setting favourites to: " + newFavs.toString());
                    FileWriter fileWriter = new FileWriter (filePath);
                    System.out.print(user.toString() + "\n");
                    fileWriter.write(user.toString());
                    fileWriter.close();
                }
                
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
            catch (Exception e) {
                e.printStackTrace();
            }
        }
        else { // IF ADMIN
            String filePath = "UserDatabase/"+admin.viewadminName()+".json";
            try (FileReader reader = new FileReader(filePath)) {
                Object obj = jParse.parse(reader);
                JSONObject userJsonObj = (JSONObject) obj;
                System.out.println("Attempting to modify favourites for "+userJsonObj.get("Username"));
                JSONArray jsonArray = (JSONArray) userJsonObj.get("Pois");
                Object[] array = jsonArray.toArray();
                
                JSONArray newFavs = new JSONArray();
                for (int i=0; i<array.length; i++) {
                    String itemName = ((JSONObject) array[i]).get("Favourite").toString();
                    System.out.println("Scanning item: " + itemName);
                    if (itemName.equals(poiSelected)){
                        exist = true;
                        System.out.println("Success!");
                        
                    }
                    else {
                        System.out.println("Error: POI does not exists in list");
                        newFavs.add((JSONObject) array[i]);
                        System.out.println("Added " +itemName+ " to "+newFavs);
                    }
                }
                if (exist){
                    System.out.println("Now deleting...");
                    JSONObject user = new JSONObject();
                    user.put("Adminname", userJsonObj.get("Adminname"));  System.out.println("Setting username to: " + userJsonObj.get("Adminname").toString());
                    user.put("Password", userJsonObj.get("Password"));  System.out.println("Setting password to: " + userJsonObj.get("Password").toString());
                    user.put("Pois", newFavs);                              System.out.println("Setting favourites to: " + newFavs.toString());
                    FileWriter fileWriter = new FileWriter (filePath);
                    System.out.print(user.toString() + "\n");
                    fileWriter.write(user.toString());
                    fileWriter.close();
                }
                
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
            catch (Exception e) {
                e.printStackTrace();
            }
        }
        return exist;
    }
    
    /**
     * Hidden objects when page loads
     */
    private void initialHiddenObjects(){
        //mapNavigation.hide();
        //mapClassroom.hide();
        selectFavourite.hide();
        changeFloorList.hide();
        selectUnfavourite.hide();
        toggleLayer.hide();
        closeChangeFloorList.hide();
        poiIcon.hide();
        // Editing Tools
        this.editingMode = false;
        this.editingMode_AD = false;
        editingSelectButton1.hide();
        
        editingSelectDelete.hide();
        editingSelectAdd1.hide();
        editingSelectEdit.hide();
        
        labelEditingMode.hide();
        labelEditingTools.hide();
        
        editingSelectCreatePOI.hide();
        editingSelectDeletePOI.hide();
    }
    
    
    /**
     * Change map image and display the image relative to floor
     * @param layerName 
     */
    private void changeMapFloorImage(String layerName) {
        String imgName = this.floorNumber + "_" + layerName + ".png";
        String fileLocation = "Images/Buildings/" + mapCode + "/Sizes/";
        System.out.println("Searching: " + fileLocation + imgName);
        boolean exists = sysDb.imgExists(fileLocation + imgName);
        if (exists) {
            System.out.println("Map Icon: " + mapLayer.getIcon() + "\nAttempting to set new location: " + fileLocation + imgName);
            try {
                mapLayer.setIcon(new ImageIcon(fileLocation + imgName));
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            System.out.println("Could not display layer");
            JOptionPane.showMessageDialog(this, "There are no layers of this type contained within the current map.");
        }
    }
    
    /**
     * Display user favourites to ScrollPane "displayUserFavourites"
     */
    private void displayFavourites () {
        JSONParser jP = new JSONParser();
        // FIND PATH
        
        if (admin == null) { // IF USER
            String filePath = "UserDatabase/"+user.viewUserName()+".json";
            try (FileReader reader = new FileReader(filePath)) {
                System.out.println("Reading file from path: "+filePath);
                Object obj = jP.parse(reader);
                JSONObject jObject = (JSONObject) obj;
                JSONArray favs = (JSONArray)jObject.get("Pois");
                System.out.println("Favourites:\n"+favs.toString());
                Object[] array = favs.toArray();
                String allFavs = "";
                
                
                
                for (int i=0; i<array.length;i++){
                    String favPoiName = ((JSONObject) array[i]).get("Favourite").toString();
                    System.out.println("Adding favourite to display box: " + favPoiName);
                    // CURRENT POI LIST
                    boolean inMap = false;
                    int currentMapSize = selectPoiList.getItemCount();
                    for (int index=0;index<currentMapSize;index++){
                        selectPoiList.getItemAt(index);
                        if (selectPoiList.getItemAt(index).toString().equals(favPoiName)) {
                            inMap = true;
                            break;
                        }
                    }
                    if (inMap) {
                        allFavs += favPoiName + "\n";
                    }
                }
                favouritesDisplay.setText(allFavs);
            }
            catch (FileNotFoundException e) {
                e.printStackTrace();
            }
            catch (Exception e) {
                e.printStackTrace();
            }
        }
        else { // IF ADMIN
            String filePath = "UserDatabase/"+admin.viewadminName()+".json";
            try (FileReader reader = new FileReader(filePath)) {
                // FAVS
                System.out.println("Reading file from path: "+filePath);
                Object obj = jP.parse(reader);
                JSONObject jObject = (JSONObject) obj;
                JSONArray favs = (JSONArray)jObject.get("Pois");
                System.out.println("Favourites:\n"+favs.toString());
                Object[] array = favs.toArray();
                String allFavs = "";
                
                for (int i=0; i<array.length;i++){
                    String favPoiName = ((JSONObject) array[i]).get("Favourite").toString();
                    // COMPARE FAVS WITH CURRENT LIST OF POIS
                    for (int j=0;j<selectPoiList.getItemCount();j++){
                        if (selectPoiList.getItemAt(j).equals(favPoiName)) {
                            System.out.println("Adding favourite to display box: " + favPoiName);
                            allFavs += favPoiName + "\n";
                        }
                    }
                }
                favouritesDisplay.setText(allFavs);
            }
            catch (FileNotFoundException e) {
                e.printStackTrace();
            }
            catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * Switch buildings floor by number
     * @param floorNum 
     */
    private void switchFloors(int floorNum) {
        this.dispose();
        String mC = this.mapCode;
        if (this.user != null) {
            Maps differentFloor = new Maps(this.user, mC, floorNum);
            differentFloor.setVisible(true);
            

        } else {
            Maps differentFloor = new Maps(this.admin, mC, floorNum);
            differentFloor.setVisible(true);
        }
    }
    
    /**
     * Set hardcoded Icons to display images
    */
    private void setIcons(){
        backgroundImage.setIcon(new ImageIcon("Images/Icons/UWO-Night.gif"));
        Logo.setIcon(new ImageIcon("Images/Icons/UWO_LOGO_TINY.png"));
        poiIcon.setIcon(new ImageIcon("Images/Icons/POI_RED.png"));
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LandingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LandingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LandingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LandingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LandingPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Logo;
    private javax.swing.JLabel backgroundImage;
    private javax.swing.JComboBox<String> changeFloorList;
    private javax.swing.JButton closeChangeFloorList;
    private javax.swing.JScrollPane descriptionScrollPane;
    private javax.swing.JTextArea displayLongDescription;
    private javax.swing.JTextField displayPoiBuiltBy;
    private javax.swing.JTextField displayPoiCoordinates;
    private javax.swing.JTextField displayPoiName;
    private javax.swing.JTextField displayPoiType;
    private javax.swing.JRadioButton editingSelectAdd1;
    private javax.swing.JButton editingSelectButton1;
    private javax.swing.JButton editingSelectCreatePOI;
    private javax.swing.JRadioButton editingSelectDelete;
    private javax.swing.JButton editingSelectDeletePOI;
    private javax.swing.JRadioButton editingSelectEdit;
    private javax.swing.ButtonGroup editingToolsAddorEdit;
    private javax.swing.JTextArea favouritesDisplay;
    private javax.swing.JScrollPane favouritesScrollPane;
    private javax.swing.JLabel labelCoordinates;
    private javax.swing.JLabel labelEditingMode;
    private javax.swing.JLabel labelEditingTools;
    private javax.swing.JLabel labelPOIBuiltBy;
    private javax.swing.JLabel labelPOIDescription;
    private javax.swing.JLabel labelPOIName;
    private javax.swing.JLabel labelPOIType;
    private javax.swing.JLabel labelUserFavourites;
    private javax.swing.JLayeredPane layeredPane;
    private javax.swing.JLabel mapLayer;
    private javax.swing.JScrollPane mapPaneArea;
    private javax.swing.JLabel poiIcon;
    private javax.swing.JTextField searchTextEntry;
    private javax.swing.JButton selectChangeBuilding;
    private javax.swing.JButton selectChangeFloor1;
    private javax.swing.JButton selectEditingTools;
    private javax.swing.JButton selectFavourite;
    private javax.swing.JButton selectHelp;
    private javax.swing.JButton selectLayerButton;
    private javax.swing.JComboBox<String> selectLayerList;
    private javax.swing.JButton selectLogOut;
    private javax.swing.JButton selectPoiButton;
    private javax.swing.JComboBox<String> selectPoiList;
    private javax.swing.JButton selectSearch;
    private javax.swing.JButton selectUnfavourite;
    private javax.swing.JButton toggleLayer;
    // End of variables declaration//GEN-END:variables
}
